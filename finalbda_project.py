# -*- coding: utf-8 -*-
"""FInalBDA-Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sPpe2plBmLn4l42XOAoF0k8nFw-AeUHV
"""

!pip install pyspark

import os
import time
import numpy as np
import pandas as pd

from pyspark.sql import SparkSession
import pyspark.sql.functions as F
import warnings
warnings.filterwarnings('ignore')

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

spark = SparkSession.builder.appName('flight_delay').getOrCreate()

for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

file_path = 'flights.csv'
file_path1 = 'airlines.csv'
file_path2 = 'airports.csv'

flights = spark.read.csv(file_path,
                         inferSchema = True,
                         header = True)

airlines = spark.read.csv(file_path1,
                         inferSchema = True,
                         header = True)

airports = spark.read.csv(file_path2,
                         inferSchema = True,
                         header = True)

# display dataframe
flights.show(2)

# display in pandas format
flights.toPandas().head(2)

flights.printSchema()

flights = flights.drop('AIR_SYSTEM_DELAY','SECURITY_DELAY','AIRLINE_DELAY','LATE_AIRCRAFT_DELAY','WEATHER_DELAY')

airports = airports.drop('_c7','_c8','_c9','_c10','_c11','_c12','_c13','_c14','_c15','_c16','_c17','_c18','_c19','_c20','_c21','_c22','_c23','_c24','_c25','_c26','_c27','_c28','_c29', '_c30','_c31','_c32', '_c33','CANCELLATION_REASON', 'AIR_SYSTEM_DELAY','SECURITY_DELAY','AIRLINE_DELAY')

# using spark with sql, first register a sql temporary view
flights.createOrReplaceTempView("flights")

# use spark.sql and query inside it and then return a pandas dataframe
query = "select YEAR_, DESTINATION_AIRPORT, count(DESTINATION_AIRPORT) as dest_count\
         from flights\
         where ORIGIN_AIRPORT = 'SEA'\
         group by 1,2\
         order by 1 desc"

flight_query = spark.sql(query)
flight_query.show(5)

# We can also register multiple temporary views
airlines.createOrReplaceTempView("airlines")
airports.createOrReplaceTempView("airports")

# To check the temporary views created.
spark.catalog.listTables()

spark.sql("SHOW views").show()

# to create a spark dataframe from the table using spark.table
temp_table = spark.table("flights")
temp_table.show(5)

# to save the dataframe in parquet format, remember the inital flight csv dataframe
flight_df = flights.write.parquet('flights.parquet', mode = 'overwrite')

# to read the parquet file into a new dataframe
flight_df = spark.read.parquet('flights.parquet')
flight_df

# register in temp table
flight_df.createOrReplaceTempView('flights')

# run sql query on the parquet file to find the distinct count of origin and destination airport
origin_dest_count = spark.sql('select count(distinct origin_airport) as origin_airport\
                               from flights').collect()[0]
print('Count of origin airport: %d' % origin_dest_count)

# add a duration_hrs column
flights = flights.withColumn("duration_hrs", flights.AIR_TIME / 60)

# to view changes
flights.select("duration_hrs").show(5)

# using the lower function to transform all rows in CANCELLATION_REASON to lowercase
flights = flights.withColumn("cancellation_reasons", F.lower('CANCELLATION_REASON'))
flights.select("cancellation_reasons").show(5)

# creating a row ID with distinct row
flights_df = flights.select(flights["origin_airport"]).distinct()

# count rows in flights_df and number of partition
print('\nThere are %d rows in the flights_df dataframe.\n' % flights_df.count())
print('\nThere are %d partition in the flights_df dataframe.\n' % flights_df.rdd.getNumPartitions())

# add a row ID
flights_df = flights_df.withColumn('row_id', F.monotonically_increasing_id())

# show the highest 10 row
flights_df.orderBy(flights_df.row_id.desc()).show(2)

# filter where distance > 2000
long_flight = flights.filter("distance > 2000")
long_flight.show(2)

# define avg_speed using .selectExpr() method
avg_speed = flights.selectExpr("origin_airport",
                               "destination_airport",
                               "tail_number",
                               "airline",
                               "round(distance/(air_time/60),2) as avg_speed")
avg_speed.show(5)

# using the .contains() method
flights.filter(flights['airline'].contains('AA')).orderBy(['origin_airport', 'destination_airport'], ascending = [True, True]).show(2)

# using ~(negate)
flights.filter(~ F.col('airline').contains('AA')).show(2)

# using .like()
flights.filter(flights['airline'].like('%A%')).show(2)

# isin
flights.filter(flights['origin_airport'].isin(['PDX', 'LAX', 'SEA'])).show(2)

flights.select(flights.ORIGIN_AIRPORT, flights.DESTINATION_AIRPORT, flights.AIRLINE,
               F.when(flights.AIRLINE == 'OO', "yes").alias("airline_status")).show(5)

flights.select(flights.ORIGIN_AIRPORT, flights.DESTINATION_AIRPORT, flights.AIRLINE,
               F.when(flights.AIRLINE == 'OO', "yes")
               .when(flights.AIRLINE != 'OO', "no").alias("airline_status")).show(5)

# using the otherwise() clause
flights.select(flights.ORIGIN_AIRPORT, flights.DESTINATION_AIRPORT, flights.AIRLINE,
               F.when(flights.AIRLINE == 'OO', "yes")
               .otherwise("no").alias("airline_status")).orderBy("airline_status", ascending = False).show(5)

# find the shortest flight from PDX in terms of distance
flights.filter("origin_airport == 'PDX'").groupby().min("distance").show(5)

# find the longest flight from SEA in terms of distance
flights.filter("origin_airport == 'SEA'").groupby().max("distance").show()

# group by origin and find the avg duration of flight
flights.groupby("origin_airport").avg("air_time").show(5)

# group by origin, destination and find the avg duration of flight
flights.groupby("origin_airport", "destination_airport").avg("air_time").show(5)

# alternatively
flights.groupby("origin_airport", "destination_airport").agg({"air_time": 'mean'}).show(5)

# rename IATA_CODE column in airports table to airport_code
airports = airports.withColumnRenamed("IATA_CODE", "origin_airport")

# join flights dataframe to airports dataframe
flight_airports = flights.join(airports,\
                          flights["ORIGIN_AIRPORT"] == airports["origin_airport"])
flight_airports.show(2)

# rename IATA_CODE column in airports table to airline
airlines = airlines.withColumnRenamed("IATA_CODE", "airline")

# join flight_airports dataframe to airports dataframe
flight_airports_airlines = flight_airports.join(airlines, on = "airline", how = "leftouter")
print(flight_airports_airlines.show(2))

start_time = time.time()

# add caching to the rows in flights_df
flights_df = flights_df.distinct().cache()
#  count rows in flights_df noting the time
print("Counting %d rows took %f seconds" % (flights_df.count(), time.time() - start_time))


start_time = time.time()
#  count rows in flights_df again, noting the time
print("Counting %d rows took %f seconds" % (flights_df.count(), time.time() - start_time))

# to check if a dataframe is cached
print('Is flights_df cached? : %s' % flights_df.is_cached)

# to remove a cached dataframe
flights_df.unpersist()

print('Is flights_df cached? : %s' % flights_df.is_cached)